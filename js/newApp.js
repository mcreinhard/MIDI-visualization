// Generated by CoffeeScript 1.7.1
(function() {
  var delay, height, listenerCallback, paused, pedal, play, radius, streamIndex, svg, width;

  width = window.innerWidth;

  height = window.innerHeight;

  radius = 15;

  streamIndex = 0;

  this.tempoMultiplier = 1;

  pedal = false;

  paused = false;

  delay = 1500;

  svg = null;

  $(document).ready(function() {
    $('button.pause').on('click', function() {
      return paused = true;
    });
    $('button.play').on('click', function() {
      paused = false;
      return play();
    });
    $('button.setPosition').on('click', function() {
      var $positionInput;
      $positionInput = $('input.positionInput');
      if ($positionInput.val().length > 0) {
        streamIndex = parseInt($positionInput.val());
        pedal = false;
      }
      $positionInput.val('');
      return $positionInput.focus();
    });
    return svg = d3.select('body').append('svg').attr('width', width).attr('height', height);
  });

  this.loaderCallback = function(midi) {
    return MIDI.loadPlugin({
      soundfontUrl: '../lib/MIDI.js-dev/examples/soundfont/',
      instrument: 'acoustic_grand_piano',
      callback: function() {
        window.stream = parseMIDI(midi);
        $('span.length').text(stream.length);
        streamIndex = 0;
        return play();
      }
    });
  };

  play = function() {
    var event, events, time, _i, _len, _ref;
    _ref = stream[streamIndex], time = _ref.time, events = _ref.events;
    for (_i = 0, _len = events.length; _i < _len; _i++) {
      event = events[_i];
      listenerCallback(event);
    }
    if (!paused) {
      setTimeout(play, (stream[++streamIndex].time - time) / (1000 * tempoMultiplier));
      return $('span.position').text(streamIndex);
    }
  };

  listenerCallback = function(data) {
    var channel, color, note, track, type, value, velocity;
    channel = data.channel, type = data.type, note = data.note, velocity = data.velocity, value = data.value, track = data.track, color = data.color;
    switch (type) {
      case 'noteOn':
        return svg.append('circle').attr({
          cx: note * 10,
          cy: 50,
          r: 2,
          opacity: 1
        }).style('fill', 'black').transition().ease('linear').duration(delay).attr("cy", 200).transition().duration(100).attr("r", velocity / 4).style("fill", color).each("end", function() {
          return MIDI.noteOn(0, note, velocity, 0);
        }).transition().ease("sin").duration(2000).attr({
          cy: height - 50,
          r: 0,
          opacity: 0
        }).remove();
      case 'noteOff':
        return setTimeout((function() {
          if (!pedal) {
            return MIDI.noteOff(0, note, 0);
          }
        }), delay);
      case 'pedal':
        return setTimeout((function() {
          return pedal = value;
        }), delay);
    }
  };

}).call(this);

//# sourceMappingURL=newApp.map
