// Generated by CoffeeScript 1.7.1
(function() {
  var chord, chordNotes, i, patterns, type, _i, _j, _len,
    __modulo = function(a, b) { return (a % b + +b) % b; };

  this.chordFromNotes = function(noteArr) {
    var note, result, _i, _len;
    result = 0;
    for (_i = 0, _len = noteArr.length; _i < _len; _i++) {
      note = noteArr[_i];
      result |= 1 << (__modulo(note, 12));
    }
    return result;
  };

  chordNotes = {
    major: [[0, 4, 7], [0, 4]],
    minor: [[0, 3, 7], [0, 3]],
    dominant7: [[0, 4, 7, 10], [0, 4, 10]],
    open7: [[0, 7, 10]],
    diminished7: [[0, 3, 6, 9], [0, 3, 9]],
    halfdiminished7: [[0, 3, 6, 10], [0, 6, 10]],
    open5: [[0, 7]],
    tritone: [[0, 6]],
    major7: [[0, 4, 7, 11], [0, 4, 11], [0, 7, 11]],
    minorMajor7: [[0, 3, 7, 11], [0, 3, 11]],
    minor7: [[0, 3, 7, 10], [0, 3, 10]]
  };

  this.chordColors = {
    major: "blue",
    minor: "purple",
    dominant7: "green",
    open7: "green",
    diminished7: "red",
    halfdiminished7: "red",
    open5: "black",
    tritone: "red",
    major7: "yellow",
    minormajor7: "red",
    minor7: "orange"
  };

  this.chords = {};

  for (type in chordNotes) {
    patterns = chordNotes[type];
    for (_i = 0, _len = patterns.length; _i < _len; _i++) {
      chord = patterns[_i];
      for (i = _j = 0; _j < 12; i = ++_j) {
        this.chords[chordFromNotes(_(chord).map(function(x) {
          return x + i;
        }))] = type;
      }
    }
  }

}).call(this);

//# sourceMappingURL=chords.map
